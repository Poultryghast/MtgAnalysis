@page "/article"
<h1>Creating Networked Apps with C#</h1>
<h3>Introduction</h3>
<p>This article seeks to ease the process between first wanting to make a multiplayer game or program where people can interact with each other and having the knowledge to get it done. It contains a large number of links to articles, and the main goal is to make the path easier by filling in gaps instead of regurgitating existing content.</p>
<p>The lack of a starting point when it came to the internet and networking was surprising in a time where usually a topic can be understood very quickly using google. Of course, one can go to wikipedia to learn about something technical, but most of the time, without previous knowledge, wikipedia is overwhelming and rarely helpful at first.</p>
<h3>Background Knowledge</h3>
<p>One of the best starting points for learning about networking and computer communications is the Khan Academy segment on it, located <a href="https://www.khanacademy.org/computing/computers-and-internet/xcae6f4a7ff015e7d:the-internet">here</a>. Everything past the Web Protocols header is beyond the scope of this article, but it is still interesting to read. It concisely goes over the very low-level factors, like wire connections and bit rate, all the way up to the protocols used on the world wide web and in applications.</p>
<h3>Routers</h3>
<p>As far as the previous article explains, every computer is connected with cables to enough other computers to be able to reach anywhere in the world. However, this would be inconvenient for every device connected to the internet, including phones and laptops, to have wires connecting it to remote computers where its requests would be transmitted across the internet. Instead, one device per household is connected to a landline or similar cable, and all devices in the household connect to the router before reaching the internet. Typically, the router is connected to a wireless device so phones and computers can connect using wi-fi insteaad of being cabled down.</p>
<p>Consequently, to everybody else in the world all devices on one network would have the same internet protocol address. To identify where to send a packet to, routers use the port number in the IP packet to identify the destination, demonstrated in this diagram.</p>
<div class="imgbox">
    <img class="center-fit" src="images/diagram.png">
</div>
<p>This way, all devices on the router's internal network have their own internal IP and ports, but all have the same external IP and the port and internal IP are identified by a port number assigned by the router. This is called network address translation or port address translation. It's explained in detail well in <a href="http://web.cse.ohio-state.edu/~athreya.14/cse3461-5461/Cse3461.NAT-PAT.pdf">this</a> slideshow from an Ohio State University presentation.</p>
<h3>Investigating Your Personal Computer's Ports</h3>
<p>There are two commands in the Windows command prompt that can be interesting to see how the ports on your computer are used. Each program uses ports to connect to the internet, and you can view which ports are being used with the command netstat -ano which will display:</p>
<p>Protocol used (TCP or UDP)</p>
<p>Local address and port used</p>
<p>Foreign address it's connected to</p>
<p>State of the connection Process ID</p>
<p>Then you can also run tasklist to connect the process ID's to the process name that you can understand. By matching up these two responses in the command prompt you can sleuth around and see which programs are connected to the internet and which ports they are using.</p>
<h3>Resources for Creating the Program</h3>
<p>When looking for server hosting or Unity packages to implement multiplayer there is an overwhelming number of products available for an equal number of different needs. Both standalone C# and C# used with Unity are extremely common.</p>
<p>For web hosting in C#, Microsoft Azure is very easy to integrate and has numerous templates and guidance. Within Azure, one of the best ways to host a website that people can use to interact with each other is using Blazor. Blazor clearly separates the server and the client and it is relatively straightforward to use, because it also uses Razor Pages, which is a way of incorporating C# code into an HTML page. A very good demonstration to look through is located <a href="https://docs.microsoft.com/en-us/aspnet/core/tutorials/signalr-blazor">here</a>. Make sure you have the Web Development workload installed in Visual Studio.</p>
<p>For LAN uses of C#, the System.Net.Sockets class includes all of the functionality for creating socket connections between computers and sending and receiving messages. It's too low level to be used for very much, but it can be used for LAN programs or just understanding the basics of connecting sockets. It's recommended to read the send() and receive() methods and browse some of the demonstrations in the method definitions to get an idea about binding sockets, connecting, sending, and receiving.</p>
<p>As for making games with Unity, <a href="https://mirror-networking.com/">Mirror Multiplayer</a> is a library for handling all of the client-server connections, and allows one to easily handle the server logic of what is client-side or server-side without having to use lower level stuff that others have already done. <a href="https://gamedevacademy.org/how-to-create-a-multiplayer-game-in-unity/">This</a> article covers the most basic functions such as sharing a transform on the network or sending commands to the server.</p>
