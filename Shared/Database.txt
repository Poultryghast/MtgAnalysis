CREATE TABLE tournaments (
	id SERIAL PRIMARY KEY,
	cardset VARCHAR,
	gametype VARCHAR,
	date DATE
);

CREATE TABLE decks (
	id SERIAL PRIMARY KEY,
	tournament INTEGER REFERENCES tournaments(id) ON DELETE CASCADE,
	mainboard VARCHAR[],
	sideboard VARCHAR[]
);

CREATE TABLE games (
	winner INTEGER REFERENCES decks(id) ON DELETE CASCADE,
	loser INTEGER REFERENCES decks(id) ON DELETE CASCADE
);

CREATE TABLE clusters (
	id SERIAL PRIMARY KEY,
	mainboard VARCHAR[],
	sideboard VARCHAR[],
	frequency DECIMAL
);

CREATE TABLE significantmatchups (
	winner INTEGER REFERENCES clusters(id) ON DELETE CASCADE,
	loser INTEGER REFERENCES clusters(id) ON DELETE CASCADE,
	winrate DECIMAL
);

CREATE TABLE similarclusters (
	clustera INTEGER REFERENCES clusters(id) ON DELETE CASCADE,
	clusterb INTEGER REFERENCES clusters(id) ON DELETE CASCADE,
	distance INTEGER
);

CREATE TABLE cards (
	name VARCHAR PRIMARY KEY,
	frequency INTEGER
);

CREATE TABLE highlightcards (
	cluster INTEGER REFERENCES clusters(id) ON DELETE CASCADE,
	card VARCHAR REFERENCES cards(name) ON DELETE CASCADE,
	frequency DECIMAL
);

CREATE TABLE similarcards (
	carda VARCHAR REFERENCES cards(name) ON DELETE CASCADE,
	cardb VARCHAR REFERENCES cards(name) ON DELETE CASCADE,
	cooccurences INTEGER
);

CREATE VIEW previews AS 
SELECT c.id,
c.frequency,
c.mainboard,
c.sideboard, 
(
	SELECT array
	(
		SELECT h.card FROM highlightcards h WHERE h.cluster = c.id ORDER BY h.frequency DESC LIMIT 5
	)
) as highlights,
(
	SELECT array
	(
		SELECT s.clustera FROM similarclusters s WHERE s.clusterb = c.id UNION SELECT s.clusterb FROM similarclusters s WHERE s.clustera = c.id
	)
) as similar
FROM clusters c ORDER BY c.frequency DESC;